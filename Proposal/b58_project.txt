CSCB58 Project File: Summer 2017

Team Member A
-------------
First Name: Khansa
Last Name: Kiasatina
Student Number: 1003159556
UofT E-mail Address: khansa.kiasatina@mail.utoronto.ca

Team Member B
-------------
First Name: Hoi Yan (Sherry)
Last Name: Ma
Student Number: 1003158343
UofT E-mail Address: hoi.ma@mail.utoronto.ca

Project Details
---------------
Project Title: Pyonpyon Race

Project Description:
A fun game where you compete against another player to see who can reach the end the fastest.
Each player has two keys to press: left or right. On the screen, there'll be 25 white boxes randomly (tentative)
placed on either side of a long pole that the player has to jump on to advance by pressing the correct 
key corresponding to the position of the box. You'll know which box you're currently on because the
previous white boxes you've already been on will have changed to a different colour depending on which
player you are.
When either player finishes, the time taken for the fastest racer and the accuracy score for each player
is displayed. The fastest time taken is saved and displayed to see if anyone else can beat the record.
(Other tentative ideas: The next box to advance is either red, blue, or yellow. If it is red, user has to press
the opposite key of the box position to advance. If it is blue, user has to press the corresponding key for the 
next box position to advance. If it is yellow, user had to press both keys at the same time to advance.) 

Video URL:

Code URL (please upload a copy of this file to your repository at the end of the project as well, it will
serve as a useful resource for future development):

Proposal
--------
What do you plan to have completed by the end of the first lab session?:
Main:
- Test the user interface code on the VGA to see if the boxes and poles are drawn correctly in the wanted 
positions
- Check if finite state machine work by testing if colour of box changes when player presses the correct key 
to advance
Other:
- Complete the timer for the game to see if it's counting correctly depending on when the game starts and 
stops
- Test the decimal decoder written for the time and accuracy score
- (optional) Test the randomisation modules to see if the positions of the boxes change when a new game starts

What do you plan to have completed by the end of the second lab session?:
Main:
- Debug main code to fix any errors or issues present
Other:
- Add or remove features of game depending on whether they work or not, for example randomisation, new colours
for the boxes, removing colours altogether

What do you plan to have completed by the end of the third lab session?:
Main:
- Debug main code so that we actually have something to present in the last lab session

What is your backup plan if things donâ€™t work out as planned?
- Randomisation modules don't work: positions of boxes remain fixed even if new game starts
- Colour doesn't change when user advances: player has to be attentive and decide for themselves which key
to press next

What hardware will you need beyond the DE2 board 
- VGA monitor

Motivations
-----------
How does this project relate to the material covered in CSCB58?:
The project contains finite state machines for features like recording where the player is currently at
in the race and allowing the players' accuracy to be calculated.
It also countains counters to count the time taken for either player to reach the end, and also to calculate
their scores.
For the time taken, a rate divider will be used so that it counts time accurately.
The VGA monitor will be used to output the poles and boxes so the player can visually see the boxes to know
which key to press next.
Hex decoders will be used to show the player's accuracy score while playing the game and at the end, the time 
taken by the fastest player to reach the end.

Why is this project interesting/cool (for CSCB58 students, and for non CSCB58 students?):
You get to compete against another player to see who is the fastest and most accurate at pressing the correct
key corresponding to what's on the screen. It also contains a lot of pretty complicated features (VGA monitor, 
counters, FSMs) that was covered in the course and put together to create a cohesive game.

Why did you personally choose this project?:
It was inspired by a mini game in the game Mario Party on the Nintendo DS called Domino Effect.
We wanted to create a game with simple instructions and controls but still fun to play with and easy to bring
out the competitive spirit in both players.

Attributions
------------
Provide a complete list of any external resources your project used (attributions should also be included in your
code).  

Updates
-------

Week 1: We tested the decimal counter we wrote for our timer and score-keeper and it worked perfectly. The .mif file 
we had intended to use for the initial state didn't work because the depth was too high (32768 compared to 19200) so 
we spent a while trying to find other ways to convert a .bmp file to a .mif file. We couldn't find any so we had to 
write the .mif file manually and kept testing it using the VGA monitor. We couldn't get the reset module we wrote to 
work so instead of resetting all the boxes to white again, we decided to just change the colour of the boxes when a 
new game starts. We were also finding it difficult to draw a 3x3 box continuously despite having the code for it, so 
we decided to just change the colour of the middle of a box when the player gets to that box.   
